{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedConponent","connect","props","to","module","exports","DialogItem","path","id","className","s","dialog","active","name","Message","message","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","formMessageRef","React","useRef","dialogsItems","ref","onChange","text","current","value","updateMessage","newMessageText","onClick","sendMessage","compose","messagesPage","dispatch","action","actions","sendMessageActionCreator","updateMessageActionCreator"],"mappings":"+NAOIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAIhB,SAASE,EAAiBC,GAc7B,OAJqCC,YAChCN,EAA4B,GADIM,EARrC,SAA2BC,GACvB,IAAML,EAAyBK,EAAzBL,OAEN,OAFA,YAA+BK,EAA/B,GAEKL,EAEE,cAACG,EAAD,eAAsBE,IAFT,cAAC,IAAD,CAAUC,GAAI,gB,oBChB1CC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAlLD,EAAOC,QAAU,CAAC,aAAe,iCAAiC,OAAS,6B,oBCA3ED,EAAOC,QAAU,CAAC,SAAW,0BAA0B,QAAU,2B,wHCkBlDC,EAVyB,SAACJ,GAErC,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAAST,GAAII,EAAb,SAAoBL,EAAMW,U,kBCHnBC,EAJsB,SAACZ,GAClC,OAAO,qBAAKO,UAAWC,IAAEC,OAAlB,SAA2BT,EAAMa,WCiD7BC,EAxCyB,SAACd,GAErC,IAAIN,EAAQM,EAAMe,YAEdC,EAAkBtB,EAAMuB,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYR,KAAMQ,EAAER,KAAiBL,GAAIa,EAAEb,IAAZa,EAAEb,OAC1Ec,EAAmB1B,EAAM2B,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAST,QAASS,EAAET,SAAcS,EAAEhB,OAG/EiB,EAAiBC,IAAMC,OAA4B,MAcvD,OACI,sBAAKlB,UAAWC,IAAES,QAAlB,UACI,qBAAKV,UAAWC,IAAEkB,aAAlB,SACKV,IAEL,qBAAKT,UAAWC,IAAEa,SAAlB,SACKD,IAGL,sBAAKb,UAAU,UAAf,UACI,0BAAUoB,IAAKJ,EAAgBK,SAjBrB,WAAO,IAAD,EACpBC,EAAI,UAAGN,EAAeO,eAAlB,aAAG,EAAwBC,MACnC/B,EAAMgC,cAAcH,IAe8CE,MAAO/B,EAAMiC,iBACvE,wBAAQ1B,UAAU,oBAAoB2B,QAvB9B,WAEhBlC,EAAMmC,eAqBE,iC,yBCfDC,sBACXrC,aA3BkB,SAACL,GAEnB,MAAQ,CAIAqB,YAAarB,EAAM2C,iBAIN,SAACC,GAEtB,MAAQ,CACJH,YAAa,WAET,IAAII,EAASC,IAAQC,2BACrBH,EAASC,IAEbP,cAAe,SAACH,GAEZ,IAAIU,EAAUC,IAAQE,2BAA2Bb,GACjDS,EAASC,QAOjB1C,IAFWuC,CAGZtB","file":"static/js/3.5909bbd7.chunk.js","sourcesContent":["import { AppStateType } from '../redux/reduxStore';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function withAuthRedirect(WrappedConponent: React.ComponentType) {\r\n\r\n    function RedirectComponent(props: any) {\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n\r\n        return <WrappedConponent {...props} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect\r\n        (mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2baNc\",\"dialogsItems\":\"Dialogs_dialogsItems__2QEZw\",\"active\":\"Dialogs_active__2vs4t\",\"messages\":\"Dialogs_messages__3QKHb\",\"message\":\"Dialogs_message__1Zm1x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItems\":\"DialogItem_dialogsItems__WhsOR\",\"active\":\"DialogItem_active__2PoHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__1bV73\",\"message\":\"Message_message__3payM\"};","import React from 'react';\r\nimport s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string \r\n    id: number \r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    \r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/messagesReducer';\r\n\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: initialStateType\r\n    sendMessage: () => void\r\n    updateMessage: (text: string | undefined) => void\r\n    newMessageText: string\r\n}\r\n\r\n\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    //   let formMessageRef = React.createRef()\r\n    let formMessageRef = React.useRef<HTMLTextAreaElement>(null);\r\n\r\n    let onSendMessage = () => {\r\n\r\n        props.sendMessage();\r\n    }\r\n\r\n    let onMessageChange = () => {\r\n        let text = formMessageRef.current?.value;\r\n        props.updateMessage(text);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n\r\n            <div className=\"sendMsg\">\r\n                <textarea ref={formMessageRef} onChange={onMessageChange} value={props.newMessageText}></textarea>\r\n                <button className=\"buttonSendMessage\" onClick={onSendMessage}>Send message</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n// Bag  message not  erased after sending\r\nexport default Dialogs;","import React from 'react';\r\nimport { actions } from '../../redux/messagesReducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from \"react-redux\"\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType)  =>\r\n{\r\n    return  {\r\n      /*       messages: state.messagesPage.messages,\r\n            dialogs: state.messagesPage.dialogs,\r\n            newMessageText: state.messagesPage.newMessageText, */\r\n            dialogsPage: state.messagesPage\r\n    } \r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any)  =>\r\n{\r\n    return  {\r\n        sendMessage: () =>\r\n        {\r\n            let action = actions.sendMessageActionCreator();\r\n            dispatch(action);\r\n        },\r\n        updateMessage: (text: string) =>\r\n        {\r\n            let action =  actions.updateMessageActionCreator(text);\r\n            dispatch(action);\r\n        }\r\n    }\r\n}  \r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);"],"sourceRoot":""}