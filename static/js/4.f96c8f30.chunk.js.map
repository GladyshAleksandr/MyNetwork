{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedConponent","connect","props","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataForm","handleSubmit","profile","useSelector","profilePage","initialValues","lookingForAJob","fullname","aboutMe","lookingForAJobDescription","photos","iserId","userId","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","values","profileData","isSubmitting","type","name","disabled","ProfileData","isOwner","goToEditMode","onClick","Object","keys","map","key","contactTitle","contactValue","Contact","className","s","contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","large","userPhoto","mainPhoto","target","files","length","FormData","then","Post","item","message","likesCount","MyPosts","postsElements","posts","p","id","newPostElement","React","useRef","postsBlock","ref","text","current","updateNewPostText","newPostText","addPost","MyPostsContainer","dispatch","actions","addPostActionCreator","action","updateNePostTextActionCreator","Profile","ProfileContainer","this","match","params","getUserProfileThunkCreator","getStatusThunkCreator","history","push","refreshProfile","prevProps","prevState","myId","updateStatusThunkCreator","Component","compose","withRouter"],"mappings":"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","file":"static/js/4.f96c8f30.chunk.js","sourcesContent":["import { AppStateType } from '../redux/reduxStore';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport function withAuthRedirect(WrappedConponent: React.ComponentType) {\r\n\r\n    function RedirectComponent(props: any) {\r\n        let { isAuth, ...restProps } = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"} />\r\n\r\n        return <WrappedConponent {...props} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect\r\n        (mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__35DDY\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2N7KG\",\"contact\":\"ProfileInfo_contact__2VSQR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__kSd9U\",\"posts\":\"MyPosts_posts__3pffe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1nFkb\"};","import React, { ChangeEvent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype  PropsType = {\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\n\r\nconst  ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n   /*  let stateWithSetState = useState(false);\r\n    let editMode = stateWithSetState[0];\r\n    let setEditMode = stateWithSetState[1]; */\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status] ); // теперь перерисовка зависит от props.status \r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n   const  deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    } \r\n\r\n   const  onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n          setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        { !editMode && \r\n        <div>\r\n            <b>Status: </b>  <span onDoubleClick={ activateEditMode} >{props.status || \"------\"}</span>\r\n        </div>\r\n        }\r\n\r\n        { editMode && \r\n        <div>\r\n            <input  autoFocus={true} onChange={onStatusChange} onBlur={ deactivateEditMode } value={status} ></input>\r\n        </div>\r\n        }\r\n    </div>\r\n    )\r\n    }\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    handleSubmit: (ProfileData: ProfileType) => void\r\n}\r\n\r\nconst ProfileDataForm: React.FC<ProfileDataFormType> = ({ handleSubmit }) => {\r\n\r\n    let profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\r\n    let onSubmit = (values: ProfileType) => {\r\n\r\n        let profileData: ProfileType =\r\n        {\r\n            lookingForAJob: values.lookingForAJob,\r\n            fullname: values.fullname,\r\n            contacts: {\r\n                github: values.contacts.github,\r\n                vk: values.contacts.vk,\r\n                facebook: values.contacts.facebook,\r\n                instagram: values.contacts.instagram,\r\n                twitter: values.contacts.twitter,\r\n                website: values.contacts.website,\r\n                youtube: values.contacts.youtube,\r\n                mainLink: values.contacts.mainLink\r\n            },\r\n            aboutMe: values.aboutMe,\r\n            lookingForAJobDescription: values.lookingForAJobDescription,\r\n            photos: values.photos,\r\n            userId: values.userId,\r\n        }\r\n\r\n        handleSubmit(profileData)\r\n    }\r\n    return <div>\r\n        <Formik\r\n            initialValues={{\r\n                lookingForAJob: profile?.lookingForAJob, fullname: profile?.fullname,\r\n                aboutMe: profile?.aboutMe,\r\n                lookingForAJobDescription: profile?.lookingForAJobDescription,\r\n                photos: profile?.photos, iserId: profile?.userId,\r\n                contacts: {\r\n                    github: profile?.contacts?.github,\r\n                    vk: profile?.contacts?.vk,\r\n                    facebook: profile?.contacts?.facebook,\r\n                    instagram: profile?.contacts?.instagram,\r\n                    twitter: profile?.contacts?.twitter,\r\n                    website: profile?.contacts?.website,\r\n                    youtube: profile?.contacts?.youtube,\r\n                    mainLink: profile?.contacts?.mainLink\r\n                }\r\n            }}\r\n\r\n            onSubmit={onSubmit}\r\n\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <div>\r\n                        <b>Full name </b> <Field type=\"text\" name=\"fullname\" />\r\n                    </div> <br />\r\n                    <div>\r\n                        <b>Looking for a job</b> <Field type=\"checkbox\" name=\"lookingForAJob\" />\r\n                    </div> <br />\r\n                    <div>\r\n                        <b>Looking for a job description</b> <Field type=\"text\" name=\"lookingForAJobDescription\" />\r\n                    </div> <br />\r\n                    <div>\r\n                        <b>About me </b> <Field type=\"text\" name=\"aboutMe\" />\r\n                    </div> <br />\r\n                    <div>\r\n                        <b>Contacts</b> <br />\r\n                        <div>github</div>\r\n                        <Field type=\"text\" name=\"github\" />\r\n                        <div>vk</div>\r\n                        <Field type=\"text\" name=\"vk\" />\r\n                        <div>facebook</div>\r\n                        <Field type=\"text\" name=\"facebook\" />\r\n                        <div>instagram</div>\r\n                        <Field type=\"text\" name=\"instagram\" />\r\n                        <div>twitter</div>\r\n                        <Field type=\"text\" name=\"twitter\" />\r\n                        <div>website</div>\r\n                        <Field type=\"text\" name=\"website\" />\r\n                        <div>youtube</div>\r\n                        <Field type=\"text\" name=\"youtube\" />\r\n                        <div>mainLink</div>\r\n                        <Field type=\"text\" name=\"mainLink\" />\r\n\r\n                    </div> <br />\r\n\r\n                    <button type=\"submit\" disabled={isSubmitting} >\r\n                        Save\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n}\r\n\r\nexport default ProfileDataForm","import React, { ChangeEvent } from 'react';\r\nimport Preloader from '../../../common/preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/userPhoto.png';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, isOwner, status, updateStatus, savePhoto, saveProfile }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const mainPhotoOnSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (FormData: ProfileType) => {\r\n\r\n        saveProfile(FormData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos?.large || userPhoto} className={s.mainPhoto}></img>\r\n                {isOwner && <input type={\"file\"} onChange={mainPhotoOnSelected} /> }\r\n                <br/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm  handleSubmit={onSubmit} />\r\n                    : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />\r\n                }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n\r\n    return <div>\r\n\r\n        {isOwner &&\r\n            <div>\r\n                <button onClick={goToEditMode}>\r\n                    edit\r\n                </button>\r\n            </div>\r\n        }\r\n\r\n        <div>\r\n            <b>Full name </b>: {profile.fullname}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Looking  for  a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills </b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n\r\n        }\r\n\r\n        <div>\r\n            <b>About me </b>: {profile.aboutMe}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts ? profile.contacts : '').map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts ? profile.contacts [key as keyof ContactsType] : '' } />\r\n            })}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | undefined\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { PostType } from '../../../../types/types';\r\nimport s from './Post.module.css';\r\n\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\nconst Post: React.FC<PropsType> = (props) => {\r\n\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { PostType } from '../../../types/types';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: () => void \r\n    updateNewPostText: (text: string | undefined) => void\r\n\r\n}\r\n\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n    let postsElements = props.posts.map( p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n       // let newPostElement = React.createRef();\r\n        let newPostElement = React.useRef<HTMLTextAreaElement>(null);\r\n\r\n        let onAddPost = () =>\r\n        {\r\n            props.addPost();\r\n        }\r\n\r\n        let onPostChange = () =>\r\n        {\r\n            let text = newPostElement.current?.value;\r\n           props.updateNewPostText(text);                   // error\r\n        }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea ref={newPostElement} onChange={onPostChange} value={props.newPostText} />\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                { postsElements }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profileReducer';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\nimport MyPosts from './MyPosts'; \r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) =>\r\n{\r\n   return {\r\n      posts: state.profilePage.posts,\r\n      newPostText: state.profilePage.newPostText\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any) =>\r\n{\r\n   return {\r\n      addPost: () =>\r\n      {\r\n            dispatch(actions.addPostActionCreator());\r\n      },\r\n\r\n      updateNewPostText: (text: any ) =>\r\n      {\r\n         let action  = actions.updateNePostTextActionCreator(text);\r\n            dispatch(action);\r\n      }\r\n   }\r\n}\r\n\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default  MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={props.saveProfile}\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;             ","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { saveProfile, getUserProfileThunkCreator, savePhoto, updateStatusThunkCreator, getStatusThunkCreator } from '../../redux/profileReducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { ProfileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\n\r\ntype MapsPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfileThunkCreator: (id: number) => void\r\n    getStatusThunkCreator: (id: number) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapsPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n\r\n        if (!userId) {\r\n            this.props.history.push(\"/login\");\r\n        }\r\n\r\n        else {\r\n            this.props.getUserProfileThunkCreator(userId);\r\n            this.props.getStatusThunkCreator(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile}\r\n                    isOwner={ +this.props.match.params.userId === this.props.myId }\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatusThunkCreator}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    myId: state.auth.myId\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator, getStatusThunkCreator, updateStatusThunkCreator,\r\n        savePhoto, saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}