{"version":3,"sources":["pages/chat/chatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScroll","setAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","setMessage","onChange","value","disabled","onClick","sendMessage","React","memo","src","photo","width","userName","ChatPage"],"mappings":"0LAkBMA,EAAiB,WAEnB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAW/D,OATAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAGd,IAGI,gCACS,UAAXN,GAAsB,yEACvB,cAACO,EAAD,IACA,cAACC,EAAD,QAIFD,EAAyB,WAC3B,IAAME,EAAoBC,iBAAuB,MAC3CC,EAAWV,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKQ,YACjE,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OALAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACN,IACG,sBAAKO,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAfrC,SAACC,GACnB,IAAMC,EAAWD,EAAEE,cACfC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAE3EhB,GAAgBC,GAAc,GAG/BD,GAAgBC,GAAc,IAQ/B,UACFH,EAASmB,KAAI,SAACC,GAAD,OAAO,cAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,OACrC,qBAAKC,IAAK1B,QAKZD,EAA+B,WAEjC,MAA8BI,mBAAS,IAAvC,mBAAOqB,EAAP,KAAgBG,EAAhB,KACMtC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAQ/D,OAAO,gCACH,8BACI,0BAAUqC,SAAW,SAAAf,GAAC,OAAIc,EAAWd,EAAEE,cAAcc,QAASA,MAAOL,MAEzE,8BACI,wBAAQM,SAAqB,UAAXvC,EAAoBwC,QAXnB,WAClBP,IAELnC,EAAS2C,YAAYR,IACrBG,EAAW,MAOP,wBAKNJ,EAAkDU,IAAMC,MAAM,YAAmB,IAAhBV,EAAe,EAAfA,QAEnE,OAAO,gCACH,qBAAKW,IAAKX,EAAQY,MAAO3B,MAAO,CAAE4B,MAAO,UADtC,IACmD,4BAAIb,EAAQc,WAClE,uBACCd,EAAQA,QACT,6BAMOe,UAzFY,WACvB,OAAO,8BACH,cAACnD,EAAD","file":"static/js/5.a764d503.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { startMessagesListening, stopMessagesListening, sendMessage } from \"../../redux/chatRecucer\"\r\nimport { AppStateType } from \"../../redux/reduxStore\"\r\n\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured please refresh page</div>}\r\n        <Messages />\r\n        <AddMessageForm />\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const [isAutoScroll, setAutoScroll] = useState(false)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element  = e.currentTarget\r\n        if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300)\r\n        {\r\n            !isAutoScroll && setAutoScroll(true)\r\n        }\r\n        else {\r\n            isAutoScroll && setAutoScroll(false)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n    return <div style={{ height: \"400px\", overflowY: \"auto\" }} onScroll={scrollHandler}>\r\n        {messages.map((m) => <Message key={m.id} message={m} />)}\r\n        <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) return\r\n\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return <div>\r\n        <div>\r\n            <textarea onChange={(e => setMessage(e.currentTarget.value))} value={message}></textarea>\r\n        </div>\r\n        <div>\r\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo( ({ message })  => {\r\n\r\n    return <div>\r\n        <img src={message.photo} style={{ width: \"30px\" }} /> <b>{message.userName}</b>\r\n        <br />\r\n        {message.message}\r\n        <hr />\r\n    </div>\r\n})\r\n\r\n\r\n\r\nexport default ChatPage"],"sourceRoot":""}